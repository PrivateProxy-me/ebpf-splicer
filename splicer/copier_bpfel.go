// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package splicer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadCopier returns the embedded CollectionSpec for copier.
func loadCopier() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CopierBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load copier: %w", err)
	}

	return spec, err
}

// loadCopierObjects loads copier and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*copierObjects
//	*copierPrograms
//	*copierMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCopierObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCopier()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// copierSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type copierSpecs struct {
	copierProgramSpecs
	copierMapSpecs
}

// copierSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type copierProgramSpecs struct {
	BpfRedir *ebpf.ProgramSpec `ebpf:"bpf_redir"`
	Verdict  *ebpf.ProgramSpec `ebpf:"verdict"`
}

// copierMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type copierMapSpecs struct {
	Sockets *ebpf.MapSpec `ebpf:"sockets"`
}

// copierObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCopierObjects or ebpf.CollectionSpec.LoadAndAssign.
type copierObjects struct {
	copierPrograms
	copierMaps
}

func (o *copierObjects) Close() error {
	return _CopierClose(
		&o.copierPrograms,
		&o.copierMaps,
	)
}

// copierMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCopierObjects or ebpf.CollectionSpec.LoadAndAssign.
type copierMaps struct {
	Sockets *ebpf.Map `ebpf:"sockets"`
}

func (m *copierMaps) Close() error {
	return _CopierClose(
		m.Sockets,
	)
}

// copierPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCopierObjects or ebpf.CollectionSpec.LoadAndAssign.
type copierPrograms struct {
	BpfRedir *ebpf.Program `ebpf:"bpf_redir"`
	Verdict  *ebpf.Program `ebpf:"verdict"`
}

func (p *copierPrograms) Close() error {
	return _CopierClose(
		p.BpfRedir,
		p.Verdict,
	)
}

func _CopierClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed copier_bpfel.o
var _CopierBytes []byte
